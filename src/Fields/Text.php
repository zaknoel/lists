<?php

namespace Zak\Lists\Fields;

class Text extends Field
{
    public string $type = "text";

    public function componentName(): string
    {
        return "text";
    }

    public function changeListValue(mixed $value)
    {
        return $this->changeDetailValue($value); // TODO: Change the autogenerated stub
    }

    public function changeDetailValue(mixed $value)
    {
        if ($this->multiple){
            $value = implode(', ', is_array($value) ? $value : explode("|", $value));
        }
        return $value; // TODO: Change the autogenerated stub
    }

    public function changeValue($value)
    {
        if ($this->multiple) {
            if ($value && !is_array($value)) {
                return explode("|", $value);
            }
        }
        return $value; // TODO: Change the autogenerated stub
    }

    public function filteredValue()
    {
        return trim(implode(' | ', $this->filter_value)) ?: "Все "; // TODO: Change the autogenerated stub
    }

    public function generateFilter($query)
    {
        $this->filter_value = [];
        if (request()?->has($this->attribute)) {
            $v = explode("⚬", request()?->get($this->attribute, ''));
            if (
                $this instanceof ID
                | $this instanceof Number
                | $this instanceof Date
            ) {
                foreach ($v as $k) {
                    if (str_starts_with($k, "f")) {
                        $this->filter_value["from"] = substr($k, 1);
                        $query->where($this->attribute, ">=", $this->filter_value["from"]);
                    } elseif (str_starts_with($k, "t")) {
                        $this->filter_value["to"] = substr($k, 1);
                        $query->where($this->attribute, "<=", $this->filter_value["to"]);
                    }
                }

            } else {
                $this->filter_value = ['operator' => $v[0] ?? '=', 'value' => $v[1] ?? ''];
                switch ($this->filter_value['operator']) {
                    case 'like':
                        $query->where($this->attribute, 'LIKE', '%' . $this->filter_value['value'] . '%');
                        break;
                    case 'not_like':
                        $query->where($this->attribute, 'NOT LIKE', '%' . $this->filter_value['value'] . '%');
                        break;
                    default:
                        $query->where($this->attribute, $this->filter_value['operator'], $this->filter_value['value']);
                }
            }
        }
        return $query;
    }

}
