<?php

namespace Zak\Lists\Fields;

class BelongToMany extends Select
{
    public string $model;

    public string $field = 'name';

    public array $filter = [];

    public bool $multiple = true;

    public bool $searchable = false;

    public string $list = '';

    public bool $createButton = false;

    public function list($list): static
    {
        $this->list = $list;

        return $this;
    }

    public function createButton($create = true): static
    {
        $this->createButton = $create;

        return $this;
    }

    public function searchable(): static
    {
        $this->searchable = false;

        return $this;
    }

    public function model($model): static
    {
        $this->model = $model;

        return $this;
    }

    public function filter($filter = []): static
    {
        $this->filter[] = $filter;

        return $this;
    }

    public function field($field): static
    {
        $this->field = $field;

        return $this;
    }

    public function componentName(): string
    {
        return 'relation';
    }

    public function handleFill()
    {
        if (old($this->attribute)) {
            $this->selected = is_array(old($this->attribute)) ? old($this->attribute) : [old($this->attribute)];
        } elseif ($this->default) {
            $this->selected = is_array($this->default) ? $this->default : [$this->default];
        }
        if ($this->selected) {
            $query = $this->model::whereIn('id', $this->selected);
            foreach ($this->filter as $filter) {
                if ($filter[1] === 'in') {
                    $query->whereIn($filter[0], $filter[2]);
                } else {
                    $query->where($filter[0], $filter[1], $filter[2]);
                }
            }
            $this->enum($query->get(['id', $this->field])->pluck($this->field, 'id')->toArray());
        } elseif ($this->item->{$this->attribute}) {
            $values = $this->item->{$this->attribute}->pluck($this->field, 'id')->toArray();
            $this->selected = array_keys($values);
            $this->enum($values);
        }

    }

    public function indexHandler()
    {
        if ($this->item->{$this->attribute}->count()) {
            if ($this->list && auth()->user()->can('viewAny', $this->model)) {
                $this->value = implode(', ', $this->item->{$this->attribute}
                    ->each(function ($item) {
                        $item->{$this->field.'_new'} = "<a href='".route('lists_detail', [
                            $this->list, $item,
                        ])."' target='_blank' class='text-secondary'>".$item->{$this->field}.'</a>';
                    })
                    ->pluck($this->field.'_new')->toArray());
            }

            return $this->value = implode(', ', $this->item->{$this->attribute}->pluck($this->field)->toArray());
        }
        $this->value = '';

    }

    public function saveValue($item, $data): void
    {
        if (! $item->id) {
            $item->save();
        }
        $value = array_filter(array_unique($data[$this->attribute] ?? []));
        if ($value) {
            $item->{$this->attribute}()->sync($value);
        } else {
            $item->{$this->attribute}()->detach();
        }
    }

    public function arrayValue($array)
    {
        return $array; // TODO: Change the autogenerated stub
    }
}
