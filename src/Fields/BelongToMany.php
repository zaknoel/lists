<?php

namespace Zak\Lists\Fields;

class BelongToMany extends Select
{
    public string $model;
    public string $field = "name";
    public array $filter = [];
    public bool $multiple = true;
    public bool $searchable = false;
    public function model($model): static
    {
        $this->model = $model;
        return $this;
    }

    public function filter($filter = []): static
    {
        $this->filter[] = $filter;
        return $this;
    }

    public function field($field): static
    {
        $this->field = $field;
        return $this;
    }

    public function componentName(): string
    {
        return "relation";
    }

    public function beforeShow()
    {
        if (old($this->attribute)) {
            $this->selected = is_array(old($this->attribute)) ? old($this->attribute) : [old($this->attribute)];
        } elseif ($this->item->{$this->attribute}) {
            //$this->selected=is_array($this->value)?$this->value:[$this->value];
        } elseif ($this->default) {
            $this->selected = is_array($this->default) ? $this->default : [$this->default];
        }
        if ($this->selected) {
            $query = $this->model::whereIn("id", $this->selected);
            foreach ($this->filter as $filter) {
                if ($filter[1] === "in") {
                    $query->whereIn($filter[0], $filter[2]);
                } else {
                    $query->where($filter[0], $filter[1], $filter[2]);
                }
            }
            $this->enum($query->get(["id", $this->field])->pluck($this->field, "id")->toArray());
        } elseif ($this->item->{$this->attribute}) {
            $values = $this->item->{$this->attribute}->pluck($this->field, "id")->toArray();
            $this->selected = array_keys($values);
            $this->enum($values);
        }

    }

    public function changeDetailValue($value)
    {
        return $this->changeListValue($value);
    }

    public function changeListValue($value)
    {
        if ($this->item->{$this->attribute}->count()) {
            return implode(", ", $this->item->{$this->attribute}->pluck($this->field)->toArray());
        }
        return $value;

    }

    public function saveValue($item, $value)
    {
        if (!$item->id) {
            $item->save();
        }
        $item->{$this->attribute}()->sync($value);


        return $item; // TODO: Change the autogenerated stub
    }

    public function arrayValue($array)
    {
        return $array; // TODO: Change the autogenerated stub
    }


}
